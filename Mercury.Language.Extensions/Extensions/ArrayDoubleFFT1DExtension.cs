// Copyright (c) 2017 - presented by Kei Nakai
//
// Original project is developed and published by OpenGamma Inc.
//
// Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
//
// Please see distribution for license.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
//     
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Mercury.Language.Exceptions;

namespace System
{
    /// <summary>
    /// ArrayDoubleFFT1DExtension Description
    /// </summary>
    public static class ArrayDoubleFFT1DExtension
    {

        #region DoubleFFT_1D internal methods

        public static void bitrv208(this double[] a, int offa)
        {
            double x1r, x1i, x3r, x3i, x4r, x4i, x6r, x6i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            a[offa + 2] = x4r;
            a[offa + 3] = x4i;
            a[offa + 6] = x6r;
            a[offa + 7] = x6i;
            a[offa + 8] = x1r;
            a[offa + 9] = x1i;
            a[offa + 12] = x3r;
            a[offa + 13] = x3i;
        }

        public static void bitrv208(this DoubleLargeArray a, long offa)
        {
            double x1r, x1i, x3r, x3i, x4r, x4i, x6r, x6i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            a[offa + 2] = x4r;
            a[offa + 3] = x4i;
            a[offa + 6] = x6r;
            a[offa + 7] = x6i;
            a[offa + 8] = x1r;
            a[offa + 9] = x1i;
            a[offa + 12] = x3r;
            a[offa + 13] = x3i;
        }

        public static void bitrv208neg(this double[] a, int offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x6r, x6i, x7r, x7i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            a[offa + 2] = x7r;
            a[offa + 3] = x7i;
            a[offa + 4] = x3r;
            a[offa + 5] = x3i;
            a[offa + 6] = x5r;
            a[offa + 7] = x5i;
            a[offa + 8] = x1r;
            a[offa + 9] = x1i;
            a[offa + 10] = x6r;
            a[offa + 11] = x6i;
            a[offa + 12] = x2r;
            a[offa + 13] = x2i;
            a[offa + 14] = x4r;
            a[offa + 15] = x4i;
        }

        public static void bitrv208neg(this double[] a, long offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x6r, x6i, x7r, x7i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            a[offa + 2] = x7r;
            a[offa + 3] = x7i;
            a[offa + 4] = x3r;
            a[offa + 5] = x3i;
            a[offa + 6] = x5r;
            a[offa + 7] = x5i;
            a[offa + 8] = x1r;
            a[offa + 9] = x1i;
            a[offa + 10] = x6r;
            a[offa + 11] = x6i;
            a[offa + 12] = x2r;
            a[offa + 13] = x2i;
            a[offa + 14] = x4r;
            a[offa + 15] = x4i;
        }

        public static void bitrv208neg(this DoubleLargeArray a, long offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x6r, x6i, x7r, x7i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            a[offa + 2] = x7r;
            a[offa + 3] = x7i;
            a[offa + 4] = x3r;
            a[offa + 5] = x3i;
            a[offa + 6] = x5r;
            a[offa + 7] = x5i;
            a[offa + 8] = x1r;
            a[offa + 9] = x1i;
            a[offa + 10] = x6r;
            a[offa + 11] = x6i;
            a[offa + 12] = x2r;
            a[offa + 13] = x2i;
            a[offa + 14] = x4r;
            a[offa + 15] = x4i;
        }

        public static void bitrv216(this double[] a, int offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x7r, x7i, x8r, x8i, x10r, x10i, x11r, x11i, x12r, x12i, x13r, x13i, x14r, x14i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            x8r = a[offa + 16];
            x8i = a[offa + 17];
            x10r = a[offa + 20];
            x10i = a[offa + 21];
            x11r = a[offa + 22];
            x11i = a[offa + 23];
            x12r = a[offa + 24];
            x12i = a[offa + 25];
            x13r = a[offa + 26];
            x13i = a[offa + 27];
            x14r = a[offa + 28];
            x14i = a[offa + 29];
            a[offa + 2] = x8r;
            a[offa + 3] = x8i;
            a[offa + 4] = x4r;
            a[offa + 5] = x4i;
            a[offa + 6] = x12r;
            a[offa + 7] = x12i;
            a[offa + 8] = x2r;
            a[offa + 9] = x2i;
            a[offa + 10] = x10r;
            a[offa + 11] = x10i;
            a[offa + 14] = x14r;
            a[offa + 15] = x14i;
            a[offa + 16] = x1r;
            a[offa + 17] = x1i;
            a[offa + 20] = x5r;
            a[offa + 21] = x5i;
            a[offa + 22] = x13r;
            a[offa + 23] = x13i;
            a[offa + 24] = x3r;
            a[offa + 25] = x3i;
            a[offa + 26] = x11r;
            a[offa + 27] = x11i;
            a[offa + 28] = x7r;
            a[offa + 29] = x7i;
        }

        public static void bitrv216(this DoubleLargeArray a, long offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x7r, x7i, x8r, x8i, x10r, x10i, x11r, x11i, x12r, x12i, x13r, x13i, x14r, x14i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            x8r = a[offa + 16];
            x8i = a[offa + 17];
            x10r = a[offa + 20];
            x10i = a[offa + 21];
            x11r = a[offa + 22];
            x11i = a[offa + 23];
            x12r = a[offa + 24];
            x12i = a[offa + 25];
            x13r = a[offa + 26];
            x13i = a[offa + 27];
            x14r = a[offa + 28];
            x14i = a[offa + 29];
            a[offa + 2] = x8r;
            a[offa + 3] = x8i;
            a[offa + 4] = x4r;
            a[offa + 5] = x4i;
            a[offa + 6] = x12r;
            a[offa + 7] = x12i;
            a[offa + 8] = x2r;
            a[offa + 9] = x2i;
            a[offa + 10] = x10r;
            a[offa + 11] = x10i;
            a[offa + 14] = x14r;
            a[offa + 15] = x14i;
            a[offa + 16] = x1r;
            a[offa + 17] = x1i;
            a[offa + 20] = x5r;
            a[offa + 21] = x5i;
            a[offa + 22] = x13r;
            a[offa + 23] = x13i;
            a[offa + 24] = x3r;
            a[offa + 25] = x3i;
            a[offa + 26] = x11r;
            a[offa + 27] = x11i;
            a[offa + 28] = x7r;
            a[offa + 29] = x7i;
        }

        public static void bitrv216neg(this double[] a, int offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x6r, x6i, x7r, x7i, x8r, x8i, x9r, x9i, x10r, x10i, x11r, x11i, x12r, x12i, x13r, x13i, x14r, x14i, x15r, x15i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            x8r = a[offa + 16];
            x8i = a[offa + 17];
            x9r = a[offa + 18];
            x9i = a[offa + 19];
            x10r = a[offa + 20];
            x10i = a[offa + 21];
            x11r = a[offa + 22];
            x11i = a[offa + 23];
            x12r = a[offa + 24];
            x12i = a[offa + 25];
            x13r = a[offa + 26];
            x13i = a[offa + 27];
            x14r = a[offa + 28];
            x14i = a[offa + 29];
            x15r = a[offa + 30];
            x15i = a[offa + 31];
            a[offa + 2] = x15r;
            a[offa + 3] = x15i;
            a[offa + 4] = x7r;
            a[offa + 5] = x7i;
            a[offa + 6] = x11r;
            a[offa + 7] = x11i;
            a[offa + 8] = x3r;
            a[offa + 9] = x3i;
            a[offa + 10] = x13r;
            a[offa + 11] = x13i;
            a[offa + 12] = x5r;
            a[offa + 13] = x5i;
            a[offa + 14] = x9r;
            a[offa + 15] = x9i;
            a[offa + 16] = x1r;
            a[offa + 17] = x1i;
            a[offa + 18] = x14r;
            a[offa + 19] = x14i;
            a[offa + 20] = x6r;
            a[offa + 21] = x6i;
            a[offa + 22] = x10r;
            a[offa + 23] = x10i;
            a[offa + 24] = x2r;
            a[offa + 25] = x2i;
            a[offa + 26] = x12r;
            a[offa + 27] = x12i;
            a[offa + 28] = x4r;
            a[offa + 29] = x4i;
            a[offa + 30] = x8r;
            a[offa + 31] = x8i;
        }

        public static void bitrv216neg(this double[] a, long offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x6r, x6i, x7r, x7i, x8r, x8i, x9r, x9i, x10r, x10i, x11r, x11i, x12r, x12i, x13r, x13i, x14r, x14i, x15r, x15i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            x8r = a[offa + 16];
            x8i = a[offa + 17];
            x9r = a[offa + 18];
            x9i = a[offa + 19];
            x10r = a[offa + 20];
            x10i = a[offa + 21];
            x11r = a[offa + 22];
            x11i = a[offa + 23];
            x12r = a[offa + 24];
            x12i = a[offa + 25];
            x13r = a[offa + 26];
            x13i = a[offa + 27];
            x14r = a[offa + 28];
            x14i = a[offa + 29];
            x15r = a[offa + 30];
            x15i = a[offa + 31];
            a[offa + 2] = x15r;
            a[offa + 3] = x15i;
            a[offa + 4] = x7r;
            a[offa + 5] = x7i;
            a[offa + 6] = x11r;
            a[offa + 7] = x11i;
            a[offa + 8] = x3r;
            a[offa + 9] = x3i;
            a[offa + 10] = x13r;
            a[offa + 11] = x13i;
            a[offa + 12] = x5r;
            a[offa + 13] = x5i;
            a[offa + 14] = x9r;
            a[offa + 15] = x9i;
            a[offa + 16] = x1r;
            a[offa + 17] = x1i;
            a[offa + 18] = x14r;
            a[offa + 19] = x14i;
            a[offa + 20] = x6r;
            a[offa + 21] = x6i;
            a[offa + 22] = x10r;
            a[offa + 23] = x10i;
            a[offa + 24] = x2r;
            a[offa + 25] = x2i;
            a[offa + 26] = x12r;
            a[offa + 27] = x12i;
            a[offa + 28] = x4r;
            a[offa + 29] = x4i;
            a[offa + 30] = x8r;
            a[offa + 31] = x8i;
        }

        public static void bitrv216neg(this DoubleLargeArray a, long offa)
        {
            double x1r, x1i, x2r, x2i, x3r, x3i, x4r, x4i, x5r, x5i, x6r, x6i, x7r, x7i, x8r, x8i, x9r, x9i, x10r, x10i, x11r, x11i, x12r, x12i, x13r, x13i, x14r, x14i, x15r, x15i;

            x1r = a[offa + 2];
            x1i = a[offa + 3];
            x2r = a[offa + 4];
            x2i = a[offa + 5];
            x3r = a[offa + 6];
            x3i = a[offa + 7];
            x4r = a[offa + 8];
            x4i = a[offa + 9];
            x5r = a[offa + 10];
            x5i = a[offa + 11];
            x6r = a[offa + 12];
            x6i = a[offa + 13];
            x7r = a[offa + 14];
            x7i = a[offa + 15];
            x8r = a[offa + 16];
            x8i = a[offa + 17];
            x9r = a[offa + 18];
            x9i = a[offa + 19];
            x10r = a[offa + 20];
            x10i = a[offa + 21];
            x11r = a[offa + 22];
            x11i = a[offa + 23];
            x12r = a[offa + 24];
            x12i = a[offa + 25];
            x13r = a[offa + 26];
            x13i = a[offa + 27];
            x14r = a[offa + 28];
            x14i = a[offa + 29];
            x15r = a[offa + 30];
            x15i = a[offa + 31];
            a[offa + 2] = x15r;
            a[offa + 3] = x15i;
            a[offa + 4] = x7r;
            a[offa + 5] = x7i;
            a[offa + 6] = x11r;
            a[offa + 7] = x11i;
            a[offa + 8] = x3r;
            a[offa + 9] = x3i;
            a[offa + 10] = x13r;
            a[offa + 11] = x13i;
            a[offa + 12] = x5r;
            a[offa + 13] = x5i;
            a[offa + 14] = x9r;
            a[offa + 15] = x9i;
            a[offa + 16] = x1r;
            a[offa + 17] = x1i;
            a[offa + 18] = x14r;
            a[offa + 19] = x14i;
            a[offa + 20] = x6r;
            a[offa + 21] = x6i;
            a[offa + 22] = x10r;
            a[offa + 23] = x10i;
            a[offa + 24] = x2r;
            a[offa + 25] = x2i;
            a[offa + 26] = x12r;
            a[offa + 27] = x12i;
            a[offa + 28] = x4r;
            a[offa + 29] = x4i;
            a[offa + 30] = x8r;
            a[offa + 31] = x8i;
        }

        public static void cftb040(this double[] a, int offa)
        {
            double x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i;

            x0r = a[offa] + a[offa + 4];
            x0i = a[offa + 1] + a[offa + 5];
            x1r = a[offa] - a[offa + 4];
            x1i = a[offa + 1] - a[offa + 5];
            x2r = a[offa + 2] + a[offa + 6];
            x2i = a[offa + 3] + a[offa + 7];
            x3r = a[offa + 2] - a[offa + 6];
            x3i = a[offa + 3] - a[offa + 7];
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x1r + x3i;
            a[offa + 3] = x1i - x3r;
            a[offa + 4] = x0r - x2r;
            a[offa + 5] = x0i - x2i;
            a[offa + 6] = x1r - x3i;
            a[offa + 7] = x1i + x3r;
        }

        public static void cftb040(this double[] a, long offa)
        {
            double x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i;

            x0r = a[offa] + a[offa + 4];
            x0i = a[offa + 1] + a[offa + 5];
            x1r = a[offa] - a[offa + 4];
            x1i = a[offa + 1] - a[offa + 5];
            x2r = a[offa + 2] + a[offa + 6];
            x2i = a[offa + 3] + a[offa + 7];
            x3r = a[offa + 2] - a[offa + 6];
            x3i = a[offa + 3] - a[offa + 7];
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x1r + x3i;
            a[offa + 3] = x1i - x3r;
            a[offa + 4] = x0r - x2r;
            a[offa + 5] = x0i - x2i;
            a[offa + 6] = x1r - x3i;
            a[offa + 7] = x1i + x3r;
        }

        public static void cftb040(this DoubleLargeArray a, long offa)
        {
            double x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i;

            x0r = a[offa] + a[offa + 4];
            x0i = a[offa + 1] + a[offa + 5];
            x1r = a[offa] - a[offa + 4];
            x1i = a[offa + 1] - a[offa + 5];
            x2r = a[offa + 2] + a[offa + 6];
            x2i = a[offa + 3] + a[offa + 7];
            x3r = a[offa + 2] - a[offa + 6];
            x3i = a[offa + 3] - a[offa + 7];
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x1r + x3i;
            a[offa + 3] = x1i - x3r;
            a[offa + 4] = x0r - x2r;
            a[offa + 5] = x0i - x2i;
            a[offa + 6] = x1r - x3i;
            a[offa + 7] = x1i + x3r;
        }

        public static void cftf161(this double[] a, int offa, ref double[] w, int startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];

            x0r = a[offa] + a[offa + 16];
            x0i = a[offa + 1] + a[offa + 17];
            x1r = a[offa] - a[offa + 16];
            x1i = a[offa + 1] - a[offa + 17];
            x2r = a[offa + 8] + a[offa + 24];
            x2i = a[offa + 9] + a[offa + 25];
            x3r = a[offa + 8] - a[offa + 24];
            x3i = a[offa + 9] - a[offa + 25];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y4r = x0r - x2r;
            y4i = x0i - x2i;
            y8r = x1r - x3i;
            y8i = x1i + x3r;
            y12r = x1r + x3i;
            y12i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 18];
            x0i = a[offa + 3] + a[offa + 19];
            x1r = a[offa + 2] - a[offa + 18];
            x1i = a[offa + 3] - a[offa + 19];
            x2r = a[offa + 10] + a[offa + 26];
            x2i = a[offa + 11] + a[offa + 27];
            x3r = a[offa + 10] - a[offa + 26];
            x3i = a[offa + 11] - a[offa + 27];
            y1r = x0r + x2r;
            y1i = x0i + x2i;
            y5r = x0r - x2r;
            y5i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y9r = wk1r * x0r - wk1i * x0i;
            y9i = wk1r * x0i + wk1i * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y13r = wk1i * x0r - wk1r * x0i;
            y13i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 4] + a[offa + 20];
            x0i = a[offa + 5] + a[offa + 21];
            x1r = a[offa + 4] - a[offa + 20];
            x1i = a[offa + 5] - a[offa + 21];
            x2r = a[offa + 12] + a[offa + 28];
            x2i = a[offa + 13] + a[offa + 29];
            x3r = a[offa + 12] - a[offa + 28];
            x3i = a[offa + 13] - a[offa + 29];
            y2r = x0r + x2r;
            y2i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y10r = wn4r * (x0r - x0i);
            y10i = wn4r * (x0i + x0r);
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y14r = wn4r * (x0r + x0i);
            y14i = wn4r * (x0i - x0r);
            x0r = a[offa + 6] + a[offa + 22];
            x0i = a[offa + 7] + a[offa + 23];
            x1r = a[offa + 6] - a[offa + 22];
            x1i = a[offa + 7] - a[offa + 23];
            x2r = a[offa + 14] + a[offa + 30];
            x2i = a[offa + 15] + a[offa + 31];
            x3r = a[offa + 14] - a[offa + 30];
            x3i = a[offa + 15] - a[offa + 31];
            y3r = x0r + x2r;
            y3i = x0i + x2i;
            y7r = x0r - x2r;
            y7i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y11r = wk1i * x0r - wk1r * x0i;
            y11i = wk1i * x0i + wk1r * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y15r = wk1r * x0r - wk1i * x0i;
            y15i = wk1r * x0i + wk1i * x0r;
            x0r = y12r - y14r;
            x0i = y12i - y14i;
            x1r = y12r + y14r;
            x1i = y12i + y14i;
            x2r = y13r - y15r;
            x2i = y13i - y15i;
            x3r = y13r + y15r;
            x3i = y13i + y15i;
            a[offa + 24] = x0r + x2r;
            a[offa + 25] = x0i + x2i;
            a[offa + 26] = x0r - x2r;
            a[offa + 27] = x0i - x2i;
            a[offa + 28] = x1r - x3i;
            a[offa + 29] = x1i + x3r;
            a[offa + 30] = x1r + x3i;
            a[offa + 31] = x1i - x3r;
            x0r = y8r + y10r;
            x0i = y8i + y10i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            x3r = y9r - y11r;
            x3i = y9i - y11i;
            a[offa + 16] = x0r + x2r;
            a[offa + 17] = x0i + x2i;
            a[offa + 18] = x0r - x2r;
            a[offa + 19] = x0i - x2i;
            a[offa + 20] = x1r - x3i;
            a[offa + 21] = x1i + x3r;
            a[offa + 22] = x1r + x3i;
            a[offa + 23] = x1i - x3r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x3r = wn4r * (x0r - x0i);
            x3i = wn4r * (x0i + x0r);
            x0r = y4r - y6i;
            x0i = y4i + y6r;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            a[offa + 8] = x0r + x2r;
            a[offa + 9] = x0i + x2i;
            a[offa + 10] = x0r - x2r;
            a[offa + 11] = x0i - x2i;
            a[offa + 12] = x1r - x3i;
            a[offa + 13] = x1i + x3r;
            a[offa + 14] = x1r + x3i;
            a[offa + 15] = x1i - x3r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            x3r = y1r - y3r;
            x3i = y1i - y3i;
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x0r - x2r;
            a[offa + 3] = x0i - x2i;
            a[offa + 4] = x1r - x3i;
            a[offa + 5] = x1i + x3r;
            a[offa + 6] = x1r + x3i;
            a[offa + 7] = x1i - x3r;
        }

        public static void cftf161(this double[] a, long offa, ref double[] w, long startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];

            x0r = a[offa] + a[offa + 16];
            x0i = a[offa + 1] + a[offa + 17];
            x1r = a[offa] - a[offa + 16];
            x1i = a[offa + 1] - a[offa + 17];
            x2r = a[offa + 8] + a[offa + 24];
            x2i = a[offa + 9] + a[offa + 25];
            x3r = a[offa + 8] - a[offa + 24];
            x3i = a[offa + 9] - a[offa + 25];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y4r = x0r - x2r;
            y4i = x0i - x2i;
            y8r = x1r - x3i;
            y8i = x1i + x3r;
            y12r = x1r + x3i;
            y12i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 18];
            x0i = a[offa + 3] + a[offa + 19];
            x1r = a[offa + 2] - a[offa + 18];
            x1i = a[offa + 3] - a[offa + 19];
            x2r = a[offa + 10] + a[offa + 26];
            x2i = a[offa + 11] + a[offa + 27];
            x3r = a[offa + 10] - a[offa + 26];
            x3i = a[offa + 11] - a[offa + 27];
            y1r = x0r + x2r;
            y1i = x0i + x2i;
            y5r = x0r - x2r;
            y5i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y9r = wk1r * x0r - wk1i * x0i;
            y9i = wk1r * x0i + wk1i * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y13r = wk1i * x0r - wk1r * x0i;
            y13i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 4] + a[offa + 20];
            x0i = a[offa + 5] + a[offa + 21];
            x1r = a[offa + 4] - a[offa + 20];
            x1i = a[offa + 5] - a[offa + 21];
            x2r = a[offa + 12] + a[offa + 28];
            x2i = a[offa + 13] + a[offa + 29];
            x3r = a[offa + 12] - a[offa + 28];
            x3i = a[offa + 13] - a[offa + 29];
            y2r = x0r + x2r;
            y2i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y10r = wn4r * (x0r - x0i);
            y10i = wn4r * (x0i + x0r);
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y14r = wn4r * (x0r + x0i);
            y14i = wn4r * (x0i - x0r);
            x0r = a[offa + 6] + a[offa + 22];
            x0i = a[offa + 7] + a[offa + 23];
            x1r = a[offa + 6] - a[offa + 22];
            x1i = a[offa + 7] - a[offa + 23];
            x2r = a[offa + 14] + a[offa + 30];
            x2i = a[offa + 15] + a[offa + 31];
            x3r = a[offa + 14] - a[offa + 30];
            x3i = a[offa + 15] - a[offa + 31];
            y3r = x0r + x2r;
            y3i = x0i + x2i;
            y7r = x0r - x2r;
            y7i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y11r = wk1i * x0r - wk1r * x0i;
            y11i = wk1i * x0i + wk1r * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y15r = wk1r * x0r - wk1i * x0i;
            y15i = wk1r * x0i + wk1i * x0r;
            x0r = y12r - y14r;
            x0i = y12i - y14i;
            x1r = y12r + y14r;
            x1i = y12i + y14i;
            x2r = y13r - y15r;
            x2i = y13i - y15i;
            x3r = y13r + y15r;
            x3i = y13i + y15i;
            a[offa + 24] = x0r + x2r;
            a[offa + 25] = x0i + x2i;
            a[offa + 26] = x0r - x2r;
            a[offa + 27] = x0i - x2i;
            a[offa + 28] = x1r - x3i;
            a[offa + 29] = x1i + x3r;
            a[offa + 30] = x1r + x3i;
            a[offa + 31] = x1i - x3r;
            x0r = y8r + y10r;
            x0i = y8i + y10i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            x3r = y9r - y11r;
            x3i = y9i - y11i;
            a[offa + 16] = x0r + x2r;
            a[offa + 17] = x0i + x2i;
            a[offa + 18] = x0r - x2r;
            a[offa + 19] = x0i - x2i;
            a[offa + 20] = x1r - x3i;
            a[offa + 21] = x1i + x3r;
            a[offa + 22] = x1r + x3i;
            a[offa + 23] = x1i - x3r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x3r = wn4r * (x0r - x0i);
            x3i = wn4r * (x0i + x0r);
            x0r = y4r - y6i;
            x0i = y4i + y6r;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            a[offa + 8] = x0r + x2r;
            a[offa + 9] = x0i + x2i;
            a[offa + 10] = x0r - x2r;
            a[offa + 11] = x0i - x2i;
            a[offa + 12] = x1r - x3i;
            a[offa + 13] = x1i + x3r;
            a[offa + 14] = x1r + x3i;
            a[offa + 15] = x1i - x3r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            x3r = y1r - y3r;
            x3i = y1i - y3i;
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x0r - x2r;
            a[offa + 3] = x0i - x2i;
            a[offa + 4] = x1r - x3i;
            a[offa + 5] = x1i + x3r;
            a[offa + 6] = x1r + x3i;
            a[offa + 7] = x1i - x3r;
        }

        public static void cftf161(this DoubleLargeArray a, long offa, ref double[] w, long startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];

            x0r = a[offa] + a[offa + 16];
            x0i = a[offa + 1] + a[offa + 17];
            x1r = a[offa] - a[offa + 16];
            x1i = a[offa + 1] - a[offa + 17];
            x2r = a[offa + 8] + a[offa + 24];
            x2i = a[offa + 9] + a[offa + 25];
            x3r = a[offa + 8] - a[offa + 24];
            x3i = a[offa + 9] - a[offa + 25];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y4r = x0r - x2r;
            y4i = x0i - x2i;
            y8r = x1r - x3i;
            y8i = x1i + x3r;
            y12r = x1r + x3i;
            y12i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 18];
            x0i = a[offa + 3] + a[offa + 19];
            x1r = a[offa + 2] - a[offa + 18];
            x1i = a[offa + 3] - a[offa + 19];
            x2r = a[offa + 10] + a[offa + 26];
            x2i = a[offa + 11] + a[offa + 27];
            x3r = a[offa + 10] - a[offa + 26];
            x3i = a[offa + 11] - a[offa + 27];
            y1r = x0r + x2r;
            y1i = x0i + x2i;
            y5r = x0r - x2r;
            y5i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y9r = wk1r * x0r - wk1i * x0i;
            y9i = wk1r * x0i + wk1i * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y13r = wk1i * x0r - wk1r * x0i;
            y13i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 4] + a[offa + 20];
            x0i = a[offa + 5] + a[offa + 21];
            x1r = a[offa + 4] - a[offa + 20];
            x1i = a[offa + 5] - a[offa + 21];
            x2r = a[offa + 12] + a[offa + 28];
            x2i = a[offa + 13] + a[offa + 29];
            x3r = a[offa + 12] - a[offa + 28];
            x3i = a[offa + 13] - a[offa + 29];
            y2r = x0r + x2r;
            y2i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y10r = wn4r * (x0r - x0i);
            y10i = wn4r * (x0i + x0r);
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y14r = wn4r * (x0r + x0i);
            y14i = wn4r * (x0i - x0r);
            x0r = a[offa + 6] + a[offa + 22];
            x0i = a[offa + 7] + a[offa + 23];
            x1r = a[offa + 6] - a[offa + 22];
            x1i = a[offa + 7] - a[offa + 23];
            x2r = a[offa + 14] + a[offa + 30];
            x2i = a[offa + 15] + a[offa + 31];
            x3r = a[offa + 14] - a[offa + 30];
            x3i = a[offa + 15] - a[offa + 31];
            y3r = x0r + x2r;
            y3i = x0i + x2i;
            y7r = x0r - x2r;
            y7i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y11r = wk1i * x0r - wk1r * x0i;
            y11i = wk1i * x0i + wk1r * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y15r = wk1r * x0r - wk1i * x0i;
            y15i = wk1r * x0i + wk1i * x0r;
            x0r = y12r - y14r;
            x0i = y12i - y14i;
            x1r = y12r + y14r;
            x1i = y12i + y14i;
            x2r = y13r - y15r;
            x2i = y13i - y15i;
            x3r = y13r + y15r;
            x3i = y13i + y15i;
            a[offa + 24] = x0r + x2r;
            a[offa + 25] = x0i + x2i;
            a[offa + 26] = x0r - x2r;
            a[offa + 27] = x0i - x2i;
            a[offa + 28] = x1r - x3i;
            a[offa + 29] = x1i + x3r;
            a[offa + 30] = x1r + x3i;
            a[offa + 31] = x1i - x3r;
            x0r = y8r + y10r;
            x0i = y8i + y10i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            x3r = y9r - y11r;
            x3i = y9i - y11i;
            a[offa + 16] = x0r + x2r;
            a[offa + 17] = x0i + x2i;
            a[offa + 18] = x0r - x2r;
            a[offa + 19] = x0i - x2i;
            a[offa + 20] = x1r - x3i;
            a[offa + 21] = x1i + x3r;
            a[offa + 22] = x1r + x3i;
            a[offa + 23] = x1i - x3r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x3r = wn4r * (x0r - x0i);
            x3i = wn4r * (x0i + x0r);
            x0r = y4r - y6i;
            x0i = y4i + y6r;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            a[offa + 8] = x0r + x2r;
            a[offa + 9] = x0i + x2i;
            a[offa + 10] = x0r - x2r;
            a[offa + 11] = x0i - x2i;
            a[offa + 12] = x1r - x3i;
            a[offa + 13] = x1i + x3r;
            a[offa + 14] = x1r + x3i;
            a[offa + 15] = x1i - x3r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            x3r = y1r - y3r;
            x3i = y1i - y3i;
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x0r - x2r;
            a[offa + 3] = x0i - x2i;
            a[offa + 4] = x1r - x3i;
            a[offa + 5] = x1i + x3r;
            a[offa + 6] = x1r + x3i;
            a[offa + 7] = x1i - x3r;
        }

        public static void cftf161(this DoubleLargeArray a, long offa, ref DoubleLargeArray w, long startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];

            x0r = a[offa] + a[offa + 16];
            x0i = a[offa + 1] + a[offa + 17];
            x1r = a[offa] - a[offa + 16];
            x1i = a[offa + 1] - a[offa + 17];
            x2r = a[offa + 8] + a[offa + 24];
            x2i = a[offa + 9] + a[offa + 25];
            x3r = a[offa + 8] - a[offa + 24];
            x3i = a[offa + 9] - a[offa + 25];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y4r = x0r - x2r;
            y4i = x0i - x2i;
            y8r = x1r - x3i;
            y8i = x1i + x3r;
            y12r = x1r + x3i;
            y12i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 18];
            x0i = a[offa + 3] + a[offa + 19];
            x1r = a[offa + 2] - a[offa + 18];
            x1i = a[offa + 3] - a[offa + 19];
            x2r = a[offa + 10] + a[offa + 26];
            x2i = a[offa + 11] + a[offa + 27];
            x3r = a[offa + 10] - a[offa + 26];
            x3i = a[offa + 11] - a[offa + 27];
            y1r = x0r + x2r;
            y1i = x0i + x2i;
            y5r = x0r - x2r;
            y5i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y9r = wk1r * x0r - wk1i * x0i;
            y9i = wk1r * x0i + wk1i * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y13r = wk1i * x0r - wk1r * x0i;
            y13i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 4] + a[offa + 20];
            x0i = a[offa + 5] + a[offa + 21];
            x1r = a[offa + 4] - a[offa + 20];
            x1i = a[offa + 5] - a[offa + 21];
            x2r = a[offa + 12] + a[offa + 28];
            x2i = a[offa + 13] + a[offa + 29];
            x3r = a[offa + 12] - a[offa + 28];
            x3i = a[offa + 13] - a[offa + 29];
            y2r = x0r + x2r;
            y2i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y10r = wn4r * (x0r - x0i);
            y10i = wn4r * (x0i + x0r);
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y14r = wn4r * (x0r + x0i);
            y14i = wn4r * (x0i - x0r);
            x0r = a[offa + 6] + a[offa + 22];
            x0i = a[offa + 7] + a[offa + 23];
            x1r = a[offa + 6] - a[offa + 22];
            x1i = a[offa + 7] - a[offa + 23];
            x2r = a[offa + 14] + a[offa + 30];
            x2i = a[offa + 15] + a[offa + 31];
            x3r = a[offa + 14] - a[offa + 30];
            x3i = a[offa + 15] - a[offa + 31];
            y3r = x0r + x2r;
            y3i = x0i + x2i;
            y7r = x0r - x2r;
            y7i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            y11r = wk1i * x0r - wk1r * x0i;
            y11i = wk1i * x0i + wk1r * x0r;
            x0r = x1r + x3i;
            x0i = x1i - x3r;
            y15r = wk1r * x0r - wk1i * x0i;
            y15i = wk1r * x0i + wk1i * x0r;
            x0r = y12r - y14r;
            x0i = y12i - y14i;
            x1r = y12r + y14r;
            x1i = y12i + y14i;
            x2r = y13r - y15r;
            x2i = y13i - y15i;
            x3r = y13r + y15r;
            x3i = y13i + y15i;
            a[offa + 24] = x0r + x2r;
            a[offa + 25] = x0i + x2i;
            a[offa + 26] = x0r - x2r;
            a[offa + 27] = x0i - x2i;
            a[offa + 28] = x1r - x3i;
            a[offa + 29] = x1i + x3r;
            a[offa + 30] = x1r + x3i;
            a[offa + 31] = x1i - x3r;
            x0r = y8r + y10r;
            x0i = y8i + y10i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            x3r = y9r - y11r;
            x3i = y9i - y11i;
            a[offa + 16] = x0r + x2r;
            a[offa + 17] = x0i + x2i;
            a[offa + 18] = x0r - x2r;
            a[offa + 19] = x0i - x2i;
            a[offa + 20] = x1r - x3i;
            a[offa + 21] = x1i + x3r;
            a[offa + 22] = x1r + x3i;
            a[offa + 23] = x1i - x3r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x3r = wn4r * (x0r - x0i);
            x3i = wn4r * (x0i + x0r);
            x0r = y4r - y6i;
            x0i = y4i + y6r;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            a[offa + 8] = x0r + x2r;
            a[offa + 9] = x0i + x2i;
            a[offa + 10] = x0r - x2r;
            a[offa + 11] = x0i - x2i;
            a[offa + 12] = x1r - x3i;
            a[offa + 13] = x1i + x3r;
            a[offa + 14] = x1r + x3i;
            a[offa + 15] = x1i - x3r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            x3r = y1r - y3r;
            x3i = y1i - y3i;
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x0r - x2r;
            a[offa + 3] = x0i - x2i;
            a[offa + 4] = x1r - x3i;
            a[offa + 5] = x1i + x3r;
            a[offa + 6] = x1r + x3i;
            a[offa + 7] = x1i - x3r;

        }

        public static void cftf162(this double[] a, int offa, ref double[] w, int startw)
        {
            double wn4r, wk1r, wk1i, wk2r, wk2i, wk3r, wk3i, x0r, x0i, x1r, x1i, x2r, x2i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 4];
            wk1i = w[startw + 5];
            wk3r = w[startw + 6];
            wk3i = -w[startw + 7];
            wk2r = w[startw + 8];
            wk2i = w[startw + 9];
            x1r = a[offa] - a[offa + 17];
            x1i = a[offa + 1] + a[offa + 16];
            x0r = a[offa + 8] - a[offa + 25];
            x0i = a[offa + 9] + a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y0r = x1r + x2r;
            y0i = x1i + x2i;
            y4r = x1r - x2r;
            y4i = x1i - x2i;
            x1r = a[offa] + a[offa + 17];
            x1i = a[offa + 1] - a[offa + 16];
            x0r = a[offa + 8] + a[offa + 25];
            x0i = a[offa + 9] - a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y8r = x1r - x2i;
            y8i = x1i + x2r;
            y12r = x1r + x2i;
            y12i = x1i - x2r;
            x0r = a[offa + 2] - a[offa + 19];
            x0i = a[offa + 3] + a[offa + 18];
            x1r = wk1r * x0r - wk1i * x0i;
            x1i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 10] - a[offa + 27];
            x0i = a[offa + 11] + a[offa + 26];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y1r = x1r + x2r;
            y1i = x1i + x2i;
            y5r = x1r - x2r;
            y5i = x1i - x2i;
            x0r = a[offa + 2] + a[offa + 19];
            x0i = a[offa + 3] - a[offa + 18];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 10] + a[offa + 27];
            x0i = a[offa + 11] - a[offa + 26];
            x2r = wk1r * x0r + wk1i * x0i;
            x2i = wk1r * x0i - wk1i * x0r;
            y9r = x1r - x2r;
            y9i = x1i - x2i;
            y13r = x1r + x2r;
            y13i = x1i + x2i;
            x0r = a[offa + 4] - a[offa + 21];
            x0i = a[offa + 5] + a[offa + 20];
            x1r = wk2r * x0r - wk2i * x0i;
            x1i = wk2r * x0i + wk2i * x0r;
            x0r = a[offa + 12] - a[offa + 29];
            x0i = a[offa + 13] + a[offa + 28];
            x2r = wk2i * x0r - wk2r * x0i;
            x2i = wk2i * x0i + wk2r * x0r;
            y2r = x1r + x2r;
            y2i = x1i + x2i;
            y6r = x1r - x2r;
            y6i = x1i - x2i;
            x0r = a[offa + 4] + a[offa + 21];
            x0i = a[offa + 5] - a[offa + 20];
            x1r = wk2i * x0r - wk2r * x0i;
            x1i = wk2i * x0i + wk2r * x0r;
            x0r = a[offa + 12] + a[offa + 29];
            x0i = a[offa + 13] - a[offa + 28];
            x2r = wk2r * x0r - wk2i * x0i;
            x2i = wk2r * x0i + wk2i * x0r;
            y10r = x1r - x2r;
            y10i = x1i - x2i;
            y14r = x1r + x2r;
            y14i = x1i + x2i;
            x0r = a[offa + 6] - a[offa + 23];
            x0i = a[offa + 7] + a[offa + 22];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 14] - a[offa + 31];
            x0i = a[offa + 15] + a[offa + 30];
            x2r = wk1i * x0r - wk1r * x0i;
            x2i = wk1i * x0i + wk1r * x0r;
            y3r = x1r + x2r;
            y3i = x1i + x2i;
            y7r = x1r - x2r;
            y7i = x1i - x2i;
            x0r = a[offa + 6] + a[offa + 23];
            x0i = a[offa + 7] - a[offa + 22];
            x1r = wk1i * x0r + wk1r * x0i;
            x1i = wk1i * x0i - wk1r * x0r;
            x0r = a[offa + 14] + a[offa + 31];
            x0i = a[offa + 15] - a[offa + 30];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y11r = x1r + x2r;
            y11i = x1i + x2i;
            y15r = x1r - x2r;
            y15i = x1i - x2i;
            x1r = y0r + y2r;
            x1i = y0i + y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            a[offa] = x1r + x2r;
            a[offa + 1] = x1i + x2i;
            a[offa + 2] = x1r - x2r;
            a[offa + 3] = x1i - x2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r - y3r;
            x2i = y1i - y3i;
            a[offa + 4] = x1r - x2i;
            a[offa + 5] = x1i + x2r;
            a[offa + 6] = x1r + x2i;
            a[offa + 7] = x1i - x2r;
            x1r = y4r - y6i;
            x1i = y4i + y6r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 8] = x1r + x2r;
            a[offa + 9] = x1i + x2i;
            a[offa + 10] = x1r - x2r;
            a[offa + 11] = x1i - x2i;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 12] = x1r - x2i;
            a[offa + 13] = x1i + x2r;
            a[offa + 14] = x1r + x2i;
            a[offa + 15] = x1i - x2r;
            x1r = y8r + y10r;
            x1i = y8i + y10i;
            x2r = y9r - y11r;
            x2i = y9i - y11i;
            a[offa + 16] = x1r + x2r;
            a[offa + 17] = x1i + x2i;
            a[offa + 18] = x1r - x2r;
            a[offa + 19] = x1i - x2i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            a[offa + 20] = x1r - x2i;
            a[offa + 21] = x1i + x2r;
            a[offa + 22] = x1r + x2i;
            a[offa + 23] = x1i - x2r;
            x1r = y12r - y14i;
            x1i = y12i + y14r;
            x0r = y13r + y15i;
            x0i = y13i - y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 24] = x1r + x2r;
            a[offa + 25] = x1i + x2i;
            a[offa + 26] = x1r - x2r;
            a[offa + 27] = x1i - x2i;
            x1r = y12r + y14i;
            x1i = y12i - y14r;
            x0r = y13r - y15i;
            x0i = y13i + y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 28] = x1r - x2i;
            a[offa + 29] = x1i + x2r;
            a[offa + 30] = x1r + x2i;
            a[offa + 31] = x1i - x2r;
        }

        public static void cftf162(this double[] a, long offa, ref double[] w, long startw)
        {
            double wn4r, wk1r, wk1i, wk2r, wk2i, wk3r, wk3i, x0r, x0i, x1r, x1i, x2r, x2i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 4];
            wk1i = w[startw + 5];
            wk3r = w[startw + 6];
            wk3i = -w[startw + 7];
            wk2r = w[startw + 8];
            wk2i = w[startw + 9];
            x1r = a[offa] - a[offa + 17];
            x1i = a[offa + 1] + a[offa + 16];
            x0r = a[offa + 8] - a[offa + 25];
            x0i = a[offa + 9] + a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y0r = x1r + x2r;
            y0i = x1i + x2i;
            y4r = x1r - x2r;
            y4i = x1i - x2i;
            x1r = a[offa] + a[offa + 17];
            x1i = a[offa + 1] - a[offa + 16];
            x0r = a[offa + 8] + a[offa + 25];
            x0i = a[offa + 9] - a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y8r = x1r - x2i;
            y8i = x1i + x2r;
            y12r = x1r + x2i;
            y12i = x1i - x2r;
            x0r = a[offa + 2] - a[offa + 19];
            x0i = a[offa + 3] + a[offa + 18];
            x1r = wk1r * x0r - wk1i * x0i;
            x1i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 10] - a[offa + 27];
            x0i = a[offa + 11] + a[offa + 26];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y1r = x1r + x2r;
            y1i = x1i + x2i;
            y5r = x1r - x2r;
            y5i = x1i - x2i;
            x0r = a[offa + 2] + a[offa + 19];
            x0i = a[offa + 3] - a[offa + 18];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 10] + a[offa + 27];
            x0i = a[offa + 11] - a[offa + 26];
            x2r = wk1r * x0r + wk1i * x0i;
            x2i = wk1r * x0i - wk1i * x0r;
            y9r = x1r - x2r;
            y9i = x1i - x2i;
            y13r = x1r + x2r;
            y13i = x1i + x2i;
            x0r = a[offa + 4] - a[offa + 21];
            x0i = a[offa + 5] + a[offa + 20];
            x1r = wk2r * x0r - wk2i * x0i;
            x1i = wk2r * x0i + wk2i * x0r;
            x0r = a[offa + 12] - a[offa + 29];
            x0i = a[offa + 13] + a[offa + 28];
            x2r = wk2i * x0r - wk2r * x0i;
            x2i = wk2i * x0i + wk2r * x0r;
            y2r = x1r + x2r;
            y2i = x1i + x2i;
            y6r = x1r - x2r;
            y6i = x1i - x2i;
            x0r = a[offa + 4] + a[offa + 21];
            x0i = a[offa + 5] - a[offa + 20];
            x1r = wk2i * x0r - wk2r * x0i;
            x1i = wk2i * x0i + wk2r * x0r;
            x0r = a[offa + 12] + a[offa + 29];
            x0i = a[offa + 13] - a[offa + 28];
            x2r = wk2r * x0r - wk2i * x0i;
            x2i = wk2r * x0i + wk2i * x0r;
            y10r = x1r - x2r;
            y10i = x1i - x2i;
            y14r = x1r + x2r;
            y14i = x1i + x2i;
            x0r = a[offa + 6] - a[offa + 23];
            x0i = a[offa + 7] + a[offa + 22];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 14] - a[offa + 31];
            x0i = a[offa + 15] + a[offa + 30];
            x2r = wk1i * x0r - wk1r * x0i;
            x2i = wk1i * x0i + wk1r * x0r;
            y3r = x1r + x2r;
            y3i = x1i + x2i;
            y7r = x1r - x2r;
            y7i = x1i - x2i;
            x0r = a[offa + 6] + a[offa + 23];
            x0i = a[offa + 7] - a[offa + 22];
            x1r = wk1i * x0r + wk1r * x0i;
            x1i = wk1i * x0i - wk1r * x0r;
            x0r = a[offa + 14] + a[offa + 31];
            x0i = a[offa + 15] - a[offa + 30];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y11r = x1r + x2r;
            y11i = x1i + x2i;
            y15r = x1r - x2r;
            y15i = x1i - x2i;
            x1r = y0r + y2r;
            x1i = y0i + y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            a[offa] = x1r + x2r;
            a[offa + 1] = x1i + x2i;
            a[offa + 2] = x1r - x2r;
            a[offa + 3] = x1i - x2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r - y3r;
            x2i = y1i - y3i;
            a[offa + 4] = x1r - x2i;
            a[offa + 5] = x1i + x2r;
            a[offa + 6] = x1r + x2i;
            a[offa + 7] = x1i - x2r;
            x1r = y4r - y6i;
            x1i = y4i + y6r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 8] = x1r + x2r;
            a[offa + 9] = x1i + x2i;
            a[offa + 10] = x1r - x2r;
            a[offa + 11] = x1i - x2i;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 12] = x1r - x2i;
            a[offa + 13] = x1i + x2r;
            a[offa + 14] = x1r + x2i;
            a[offa + 15] = x1i - x2r;
            x1r = y8r + y10r;
            x1i = y8i + y10i;
            x2r = y9r - y11r;
            x2i = y9i - y11i;
            a[offa + 16] = x1r + x2r;
            a[offa + 17] = x1i + x2i;
            a[offa + 18] = x1r - x2r;
            a[offa + 19] = x1i - x2i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            a[offa + 20] = x1r - x2i;
            a[offa + 21] = x1i + x2r;
            a[offa + 22] = x1r + x2i;
            a[offa + 23] = x1i - x2r;
            x1r = y12r - y14i;
            x1i = y12i + y14r;
            x0r = y13r + y15i;
            x0i = y13i - y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 24] = x1r + x2r;
            a[offa + 25] = x1i + x2i;
            a[offa + 26] = x1r - x2r;
            a[offa + 27] = x1i - x2i;
            x1r = y12r + y14i;
            x1i = y12i - y14r;
            x0r = y13r - y15i;
            x0i = y13i + y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 28] = x1r - x2i;
            a[offa + 29] = x1i + x2r;
            a[offa + 30] = x1r + x2i;
            a[offa + 31] = x1i - x2r;
        }

        public static void cftf162(this DoubleLargeArray a, long offa, ref double[] w, long startw)
        {
            double wn4r, wk1r, wk1i, wk2r, wk2i, wk3r, wk3i, x0r, x0i, x1r, x1i, x2r, x2i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 4];
            wk1i = w[startw + 5];
            wk3r = w[startw + 6];
            wk3i = -w[startw + 7];
            wk2r = w[startw + 8];
            wk2i = w[startw + 9];
            x1r = a[offa] - a[offa + 17];
            x1i = a[offa + 1] + a[offa + 16];
            x0r = a[offa + 8] - a[offa + 25];
            x0i = a[offa + 9] + a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y0r = x1r + x2r;
            y0i = x1i + x2i;
            y4r = x1r - x2r;
            y4i = x1i - x2i;
            x1r = a[offa] + a[offa + 17];
            x1i = a[offa + 1] - a[offa + 16];
            x0r = a[offa + 8] + a[offa + 25];
            x0i = a[offa + 9] - a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y8r = x1r - x2i;
            y8i = x1i + x2r;
            y12r = x1r + x2i;
            y12i = x1i - x2r;
            x0r = a[offa + 2] - a[offa + 19];
            x0i = a[offa + 3] + a[offa + 18];
            x1r = wk1r * x0r - wk1i * x0i;
            x1i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 10] - a[offa + 27];
            x0i = a[offa + 11] + a[offa + 26];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y1r = x1r + x2r;
            y1i = x1i + x2i;
            y5r = x1r - x2r;
            y5i = x1i - x2i;
            x0r = a[offa + 2] + a[offa + 19];
            x0i = a[offa + 3] - a[offa + 18];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 10] + a[offa + 27];
            x0i = a[offa + 11] - a[offa + 26];
            x2r = wk1r * x0r + wk1i * x0i;
            x2i = wk1r * x0i - wk1i * x0r;
            y9r = x1r - x2r;
            y9i = x1i - x2i;
            y13r = x1r + x2r;
            y13i = x1i + x2i;
            x0r = a[offa + 4] - a[offa + 21];
            x0i = a[offa + 5] + a[offa + 20];
            x1r = wk2r * x0r - wk2i * x0i;
            x1i = wk2r * x0i + wk2i * x0r;
            x0r = a[offa + 12] - a[offa + 29];
            x0i = a[offa + 13] + a[offa + 28];
            x2r = wk2i * x0r - wk2r * x0i;
            x2i = wk2i * x0i + wk2r * x0r;
            y2r = x1r + x2r;
            y2i = x1i + x2i;
            y6r = x1r - x2r;
            y6i = x1i - x2i;
            x0r = a[offa + 4] + a[offa + 21];
            x0i = a[offa + 5] - a[offa + 20];
            x1r = wk2i * x0r - wk2r * x0i;
            x1i = wk2i * x0i + wk2r * x0r;
            x0r = a[offa + 12] + a[offa + 29];
            x0i = a[offa + 13] - a[offa + 28];
            x2r = wk2r * x0r - wk2i * x0i;
            x2i = wk2r * x0i + wk2i * x0r;
            y10r = x1r - x2r;
            y10i = x1i - x2i;
            y14r = x1r + x2r;
            y14i = x1i + x2i;
            x0r = a[offa + 6] - a[offa + 23];
            x0i = a[offa + 7] + a[offa + 22];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 14] - a[offa + 31];
            x0i = a[offa + 15] + a[offa + 30];
            x2r = wk1i * x0r - wk1r * x0i;
            x2i = wk1i * x0i + wk1r * x0r;
            y3r = x1r + x2r;
            y3i = x1i + x2i;
            y7r = x1r - x2r;
            y7i = x1i - x2i;
            x0r = a[offa + 6] + a[offa + 23];
            x0i = a[offa + 7] - a[offa + 22];
            x1r = wk1i * x0r + wk1r * x0i;
            x1i = wk1i * x0i - wk1r * x0r;
            x0r = a[offa + 14] + a[offa + 31];
            x0i = a[offa + 15] - a[offa + 30];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y11r = x1r + x2r;
            y11i = x1i + x2i;
            y15r = x1r - x2r;
            y15i = x1i - x2i;
            x1r = y0r + y2r;
            x1i = y0i + y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            a[offa] = x1r + x2r;
            a[offa + 1] = x1i + x2i;
            a[offa + 2] = x1r - x2r;
            a[offa + 3] = x1i - x2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r - y3r;
            x2i = y1i - y3i;
            a[offa + 4] = x1r - x2i;
            a[offa + 5] = x1i + x2r;
            a[offa + 6] = x1r + x2i;
            a[offa + 7] = x1i - x2r;
            x1r = y4r - y6i;
            x1i = y4i + y6r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 8] = x1r + x2r;
            a[offa + 9] = x1i + x2i;
            a[offa + 10] = x1r - x2r;
            a[offa + 11] = x1i - x2i;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 12] = x1r - x2i;
            a[offa + 13] = x1i + x2r;
            a[offa + 14] = x1r + x2i;
            a[offa + 15] = x1i - x2r;
            x1r = y8r + y10r;
            x1i = y8i + y10i;
            x2r = y9r - y11r;
            x2i = y9i - y11i;
            a[offa + 16] = x1r + x2r;
            a[offa + 17] = x1i + x2i;
            a[offa + 18] = x1r - x2r;
            a[offa + 19] = x1i - x2i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            a[offa + 20] = x1r - x2i;
            a[offa + 21] = x1i + x2r;
            a[offa + 22] = x1r + x2i;
            a[offa + 23] = x1i - x2r;
            x1r = y12r - y14i;
            x1i = y12i + y14r;
            x0r = y13r + y15i;
            x0i = y13i - y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 24] = x1r + x2r;
            a[offa + 25] = x1i + x2i;
            a[offa + 26] = x1r - x2r;
            a[offa + 27] = x1i - x2i;
            x1r = y12r + y14i;
            x1i = y12i - y14r;
            x0r = y13r - y15i;
            x0i = y13i + y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 28] = x1r - x2i;
            a[offa + 29] = x1i + x2r;
            a[offa + 30] = x1r + x2i;
            a[offa + 31] = x1i - x2r;
        }

        public static void cftf162(this DoubleLargeArray a, long offa, ref DoubleLargeArray w, long startw)
        {
            double wn4r, wk1r, wk1i, wk2r, wk2i, wk3r, wk3i, x0r, x0i, x1r, x1i, x2r, x2i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i, y8r, y8i, y9r, y9i, y10r, y10i, y11r, y11i, y12r, y12i, y13r, y13i, y14r, y14i, y15r, y15i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 4];
            wk1i = w[startw + 5];
            wk3r = w[startw + 6];
            wk3i = -w[startw + 7];
            wk2r = w[startw + 8];
            wk2i = w[startw + 9];
            x1r = a[offa] - a[offa + 17];
            x1i = a[offa + 1] + a[offa + 16];
            x0r = a[offa + 8] - a[offa + 25];
            x0i = a[offa + 9] + a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y0r = x1r + x2r;
            y0i = x1i + x2i;
            y4r = x1r - x2r;
            y4i = x1i - x2i;
            x1r = a[offa] + a[offa + 17];
            x1i = a[offa + 1] - a[offa + 16];
            x0r = a[offa + 8] + a[offa + 25];
            x0i = a[offa + 9] - a[offa + 24];
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            y8r = x1r - x2i;
            y8i = x1i + x2r;
            y12r = x1r + x2i;
            y12i = x1i - x2r;
            x0r = a[offa + 2] - a[offa + 19];
            x0i = a[offa + 3] + a[offa + 18];
            x1r = wk1r * x0r - wk1i * x0i;
            x1i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 10] - a[offa + 27];
            x0i = a[offa + 11] + a[offa + 26];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y1r = x1r + x2r;
            y1i = x1i + x2i;
            y5r = x1r - x2r;
            y5i = x1i - x2i;
            x0r = a[offa + 2] + a[offa + 19];
            x0i = a[offa + 3] - a[offa + 18];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 10] + a[offa + 27];
            x0i = a[offa + 11] - a[offa + 26];
            x2r = wk1r * x0r + wk1i * x0i;
            x2i = wk1r * x0i - wk1i * x0r;
            y9r = x1r - x2r;
            y9i = x1i - x2i;
            y13r = x1r + x2r;
            y13i = x1i + x2i;
            x0r = a[offa + 4] - a[offa + 21];
            x0i = a[offa + 5] + a[offa + 20];
            x1r = wk2r * x0r - wk2i * x0i;
            x1i = wk2r * x0i + wk2i * x0r;
            x0r = a[offa + 12] - a[offa + 29];
            x0i = a[offa + 13] + a[offa + 28];
            x2r = wk2i * x0r - wk2r * x0i;
            x2i = wk2i * x0i + wk2r * x0r;
            y2r = x1r + x2r;
            y2i = x1i + x2i;
            y6r = x1r - x2r;
            y6i = x1i - x2i;
            x0r = a[offa + 4] + a[offa + 21];
            x0i = a[offa + 5] - a[offa + 20];
            x1r = wk2i * x0r - wk2r * x0i;
            x1i = wk2i * x0i + wk2r * x0r;
            x0r = a[offa + 12] + a[offa + 29];
            x0i = a[offa + 13] - a[offa + 28];
            x2r = wk2r * x0r - wk2i * x0i;
            x2i = wk2r * x0i + wk2i * x0r;
            y10r = x1r - x2r;
            y10i = x1i - x2i;
            y14r = x1r + x2r;
            y14i = x1i + x2i;
            x0r = a[offa + 6] - a[offa + 23];
            x0i = a[offa + 7] + a[offa + 22];
            x1r = wk3r * x0r - wk3i * x0i;
            x1i = wk3r * x0i + wk3i * x0r;
            x0r = a[offa + 14] - a[offa + 31];
            x0i = a[offa + 15] + a[offa + 30];
            x2r = wk1i * x0r - wk1r * x0i;
            x2i = wk1i * x0i + wk1r * x0r;
            y3r = x1r + x2r;
            y3i = x1i + x2i;
            y7r = x1r - x2r;
            y7i = x1i - x2i;
            x0r = a[offa + 6] + a[offa + 23];
            x0i = a[offa + 7] - a[offa + 22];
            x1r = wk1i * x0r + wk1r * x0i;
            x1i = wk1i * x0i - wk1r * x0r;
            x0r = a[offa + 14] + a[offa + 31];
            x0i = a[offa + 15] - a[offa + 30];
            x2r = wk3i * x0r - wk3r * x0i;
            x2i = wk3i * x0i + wk3r * x0r;
            y11r = x1r + x2r;
            y11i = x1i + x2i;
            y15r = x1r - x2r;
            y15i = x1i - x2i;
            x1r = y0r + y2r;
            x1i = y0i + y2i;
            x2r = y1r + y3r;
            x2i = y1i + y3i;
            a[offa] = x1r + x2r;
            a[offa + 1] = x1i + x2i;
            a[offa + 2] = x1r - x2r;
            a[offa + 3] = x1i - x2i;
            x1r = y0r - y2r;
            x1i = y0i - y2i;
            x2r = y1r - y3r;
            x2i = y1i - y3i;
            a[offa + 4] = x1r - x2i;
            a[offa + 5] = x1i + x2r;
            a[offa + 6] = x1r + x2i;
            a[offa + 7] = x1i - x2r;
            x1r = y4r - y6i;
            x1i = y4i + y6r;
            x0r = y5r - y7i;
            x0i = y5i + y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 8] = x1r + x2r;
            a[offa + 9] = x1i + x2i;
            a[offa + 10] = x1r - x2r;
            a[offa + 11] = x1i - x2i;
            x1r = y4r + y6i;
            x1i = y4i - y6r;
            x0r = y5r + y7i;
            x0i = y5i - y7r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 12] = x1r - x2i;
            a[offa + 13] = x1i + x2r;
            a[offa + 14] = x1r + x2i;
            a[offa + 15] = x1i - x2r;
            x1r = y8r + y10r;
            x1i = y8i + y10i;
            x2r = y9r - y11r;
            x2i = y9i - y11i;
            a[offa + 16] = x1r + x2r;
            a[offa + 17] = x1i + x2i;
            a[offa + 18] = x1r - x2r;
            a[offa + 19] = x1i - x2i;
            x1r = y8r - y10r;
            x1i = y8i - y10i;
            x2r = y9r + y11r;
            x2i = y9i + y11i;
            a[offa + 20] = x1r - x2i;
            a[offa + 21] = x1i + x2r;
            a[offa + 22] = x1r + x2i;
            a[offa + 23] = x1i - x2r;
            x1r = y12r - y14i;
            x1i = y12i + y14r;
            x0r = y13r + y15i;
            x0i = y13i - y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 24] = x1r + x2r;
            a[offa + 25] = x1i + x2i;
            a[offa + 26] = x1r - x2r;
            a[offa + 27] = x1i - x2i;
            x1r = y12r + y14i;
            x1i = y12i - y14r;
            x0r = y13r - y15i;
            x0i = y13i + y15r;
            x2r = wn4r * (x0r - x0i);
            x2i = wn4r * (x0i + x0r);
            a[offa + 28] = x1r - x2i;
            a[offa + 29] = x1i + x2r;
            a[offa + 30] = x1r + x2i;
            a[offa + 31] = x1i - x2r;
        }

        public static void cftf040(this double[] a, int offa)
        {
            double x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i;

            x0r = a[offa] + a[offa + 4];
            x0i = a[offa + 1] + a[offa + 5];
            x1r = a[offa] - a[offa + 4];
            x1i = a[offa + 1] - a[offa + 5];
            x2r = a[offa + 2] + a[offa + 6];
            x2i = a[offa + 3] + a[offa + 7];
            x3r = a[offa + 2] - a[offa + 6];
            x3i = a[offa + 3] - a[offa + 7];
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x1r - x3i;
            a[offa + 3] = x1i + x3r;
            a[offa + 4] = x0r - x2r;
            a[offa + 5] = x0i - x2i;
            a[offa + 6] = x1r + x3i;
            a[offa + 7] = x1i - x3r;
        }

        public static void cftf040(this DoubleLargeArray a, long offa)
        {
            double x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i;

            x0r = a[offa] + a[offa + 4];
            x0i = a[offa + 1] + a[offa + 5];
            x1r = a[offa] - a[offa + 4];
            x1i = a[offa + 1] - a[offa + 5];
            x2r = a[offa + 2] + a[offa + 6];
            x2i = a[offa + 3] + a[offa + 7];
            x3r = a[offa + 2] - a[offa + 6];
            x3i = a[offa + 3] - a[offa + 7];
            a[offa] = x0r + x2r;
            a[offa + 1] = x0i + x2i;
            a[offa + 2] = x1r - x3i;
            a[offa + 3] = x1i + x3r;
            a[offa + 4] = x0r - x2r;
            a[offa + 5] = x0i - x2i;
            a[offa + 6] = x1r + x3i;
            a[offa + 7] = x1i - x3r;
        }

        public static void cftf081(this double[] a, int offa, ref double[] w, int startw)
        {
            double wn4r, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            x0r = a[offa] + a[offa + 8];
            x0i = a[offa + 1] + a[offa + 9];
            x1r = a[offa] - a[offa + 8];
            x1i = a[offa + 1] - a[offa + 9];
            x2r = a[offa + 4] + a[offa + 12];
            x2i = a[offa + 5] + a[offa + 13];
            x3r = a[offa + 4] - a[offa + 12];
            x3i = a[offa + 5] - a[offa + 13];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y2r = x0r - x2r;
            y2i = x0i - x2i;
            y1r = x1r - x3i;
            y1i = x1i + x3r;
            y3r = x1r + x3i;
            y3i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 10];
            x0i = a[offa + 3] + a[offa + 11];
            x1r = a[offa + 2] - a[offa + 10];
            x1i = a[offa + 3] - a[offa + 11];
            x2r = a[offa + 6] + a[offa + 14];
            x2i = a[offa + 7] + a[offa + 15];
            x3r = a[offa + 6] - a[offa + 14];
            x3i = a[offa + 7] - a[offa + 15];
            y4r = x0r + x2r;
            y4i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            x2r = x1r + x3i;
            x2i = x1i - x3r;
            y5r = wn4r * (x0r - x0i);
            y5i = wn4r * (x0r + x0i);
            y7r = wn4r * (x2r - x2i);
            y7i = wn4r * (x2r + x2i);
            a[offa + 8] = y1r + y5r;
            a[offa + 9] = y1i + y5i;
            a[offa + 10] = y1r - y5r;
            a[offa + 11] = y1i - y5i;
            a[offa + 12] = y3r - y7i;
            a[offa + 13] = y3i + y7r;
            a[offa + 14] = y3r + y7i;
            a[offa + 15] = y3i - y7r;
            a[offa] = y0r + y4r;
            a[offa + 1] = y0i + y4i;
            a[offa + 2] = y0r - y4r;
            a[offa + 3] = y0i - y4i;
            a[offa + 4] = y2r - y6i;
            a[offa + 5] = y2i + y6r;
            a[offa + 6] = y2r + y6i;
            a[offa + 7] = y2i - y6r;
        }

        public static void cftf081(this double[] a, long offa, ref double[] w, long startw)
        {
            double wn4r, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            x0r = a[offa] + a[offa + 8];
            x0i = a[offa + 1] + a[offa + 9];
            x1r = a[offa] - a[offa + 8];
            x1i = a[offa + 1] - a[offa + 9];
            x2r = a[offa + 4] + a[offa + 12];
            x2i = a[offa + 5] + a[offa + 13];
            x3r = a[offa + 4] - a[offa + 12];
            x3i = a[offa + 5] - a[offa + 13];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y2r = x0r - x2r;
            y2i = x0i - x2i;
            y1r = x1r - x3i;
            y1i = x1i + x3r;
            y3r = x1r + x3i;
            y3i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 10];
            x0i = a[offa + 3] + a[offa + 11];
            x1r = a[offa + 2] - a[offa + 10];
            x1i = a[offa + 3] - a[offa + 11];
            x2r = a[offa + 6] + a[offa + 14];
            x2i = a[offa + 7] + a[offa + 15];
            x3r = a[offa + 6] - a[offa + 14];
            x3i = a[offa + 7] - a[offa + 15];
            y4r = x0r + x2r;
            y4i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            x2r = x1r + x3i;
            x2i = x1i - x3r;
            y5r = wn4r * (x0r - x0i);
            y5i = wn4r * (x0r + x0i);
            y7r = wn4r * (x2r - x2i);
            y7i = wn4r * (x2r + x2i);
            a[offa + 8] = y1r + y5r;
            a[offa + 9] = y1i + y5i;
            a[offa + 10] = y1r - y5r;
            a[offa + 11] = y1i - y5i;
            a[offa + 12] = y3r - y7i;
            a[offa + 13] = y3i + y7r;
            a[offa + 14] = y3r + y7i;
            a[offa + 15] = y3i - y7r;
            a[offa] = y0r + y4r;
            a[offa + 1] = y0i + y4i;
            a[offa + 2] = y0r - y4r;
            a[offa + 3] = y0i - y4i;
            a[offa + 4] = y2r - y6i;
            a[offa + 5] = y2i + y6r;
            a[offa + 6] = y2r + y6i;
            a[offa + 7] = y2i - y6r;
        }

        public static void cftf081(this DoubleLargeArray a, long offa, ref double[] w, long startw)
        {
            double wn4r, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            x0r = a[offa] + a[offa + 8];
            x0i = a[offa + 1] + a[offa + 9];
            x1r = a[offa] - a[offa + 8];
            x1i = a[offa + 1] - a[offa + 9];
            x2r = a[offa + 4] + a[offa + 12];
            x2i = a[offa + 5] + a[offa + 13];
            x3r = a[offa + 4] - a[offa + 12];
            x3i = a[offa + 5] - a[offa + 13];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y2r = x0r - x2r;
            y2i = x0i - x2i;
            y1r = x1r - x3i;
            y1i = x1i + x3r;
            y3r = x1r + x3i;
            y3i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 10];
            x0i = a[offa + 3] + a[offa + 11];
            x1r = a[offa + 2] - a[offa + 10];
            x1i = a[offa + 3] - a[offa + 11];
            x2r = a[offa + 6] + a[offa + 14];
            x2i = a[offa + 7] + a[offa + 15];
            x3r = a[offa + 6] - a[offa + 14];
            x3i = a[offa + 7] - a[offa + 15];
            y4r = x0r + x2r;
            y4i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            x2r = x1r + x3i;
            x2i = x1i - x3r;
            y5r = wn4r * (x0r - x0i);
            y5i = wn4r * (x0r + x0i);
            y7r = wn4r * (x2r - x2i);
            y7i = wn4r * (x2r + x2i);
            a[offa + 8] = y1r + y5r;
            a[offa + 9] = y1i + y5i;
            a[offa + 10] = y1r - y5r;
            a[offa + 11] = y1i - y5i;
            a[offa + 12] = y3r - y7i;
            a[offa + 13] = y3i + y7r;
            a[offa + 14] = y3r + y7i;
            a[offa + 15] = y3i - y7r;
            a[offa] = y0r + y4r;
            a[offa + 1] = y0i + y4i;
            a[offa + 2] = y0r - y4r;
            a[offa + 3] = y0i - y4i;
            a[offa + 4] = y2r - y6i;
            a[offa + 5] = y2i + y6r;
            a[offa + 6] = y2r + y6i;
            a[offa + 7] = y2i - y6r;
        }

        public static void cftf081(this DoubleLargeArray a, long offa, ref DoubleLargeArray w, long startw)
        {
            double wn4r, x0r, x0i, x1r, x1i, x2r, x2i, x3r, x3i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            x0r = a[offa] + a[offa + 8];
            x0i = a[offa + 1] + a[offa + 9];
            x1r = a[offa] - a[offa + 8];
            x1i = a[offa + 1] - a[offa + 9];
            x2r = a[offa + 4] + a[offa + 12];
            x2i = a[offa + 5] + a[offa + 13];
            x3r = a[offa + 4] - a[offa + 12];
            x3i = a[offa + 5] - a[offa + 13];
            y0r = x0r + x2r;
            y0i = x0i + x2i;
            y2r = x0r - x2r;
            y2i = x0i - x2i;
            y1r = x1r - x3i;
            y1i = x1i + x3r;
            y3r = x1r + x3i;
            y3i = x1i - x3r;
            x0r = a[offa + 2] + a[offa + 10];
            x0i = a[offa + 3] + a[offa + 11];
            x1r = a[offa + 2] - a[offa + 10];
            x1i = a[offa + 3] - a[offa + 11];
            x2r = a[offa + 6] + a[offa + 14];
            x2i = a[offa + 7] + a[offa + 15];
            x3r = a[offa + 6] - a[offa + 14];
            x3i = a[offa + 7] - a[offa + 15];
            y4r = x0r + x2r;
            y4i = x0i + x2i;
            y6r = x0r - x2r;
            y6i = x0i - x2i;
            x0r = x1r - x3i;
            x0i = x1i + x3r;
            x2r = x1r + x3i;
            x2i = x1i - x3r;
            y5r = wn4r * (x0r - x0i);
            y5i = wn4r * (x0r + x0i);
            y7r = wn4r * (x2r - x2i);
            y7i = wn4r * (x2r + x2i);
            a[offa + 8] = y1r + y5r;
            a[offa + 9] = y1i + y5i;
            a[offa + 10] = y1r - y5r;
            a[offa + 11] = y1i - y5i;
            a[offa + 12] = y3r - y7i;
            a[offa + 13] = y3i + y7r;
            a[offa + 14] = y3r + y7i;
            a[offa + 15] = y3i - y7r;
            a[offa] = y0r + y4r;
            a[offa + 1] = y0i + y4i;
            a[offa + 2] = y0r - y4r;
            a[offa + 3] = y0i - y4i;
            a[offa + 4] = y2r - y6i;
            a[offa + 5] = y2i + y6r;
            a[offa + 6] = y2r + y6i;
            a[offa + 7] = y2i - y6r;
        }

        public static void cftf082(this double[] a, int offa, ref double[] w, int startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];
            y0r = a[offa] - a[offa + 9];
            y0i = a[offa + 1] + a[offa + 8];
            y1r = a[offa] + a[offa + 9];
            y1i = a[offa + 1] - a[offa + 8];
            x0r = a[offa + 4] - a[offa + 13];
            x0i = a[offa + 5] + a[offa + 12];
            y2r = wn4r * (x0r - x0i);
            y2i = wn4r * (x0i + x0r);
            x0r = a[offa + 4] + a[offa + 13];
            x0i = a[offa + 5] - a[offa + 12];
            y3r = wn4r * (x0r - x0i);
            y3i = wn4r * (x0i + x0r);
            x0r = a[offa + 2] - a[offa + 11];
            x0i = a[offa + 3] + a[offa + 10];
            y4r = wk1r * x0r - wk1i * x0i;
            y4i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 2] + a[offa + 11];
            x0i = a[offa + 3] - a[offa + 10];
            y5r = wk1i * x0r - wk1r * x0i;
            y5i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] - a[offa + 15];
            x0i = a[offa + 7] + a[offa + 14];
            y6r = wk1i * x0r - wk1r * x0i;
            y6i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] + a[offa + 15];
            x0i = a[offa + 7] - a[offa + 14];
            y7r = wk1r * x0r - wk1i * x0i;
            y7i = wk1r * x0i + wk1i * x0r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y4r + y6r;
            x1i = y4i + y6i;
            a[offa] = x0r + x1r;
            a[offa + 1] = x0i + x1i;
            a[offa + 2] = x0r - x1r;
            a[offa + 3] = x0i - x1i;
            x0r = y0r - y2r;
            x0i = y0i - y2i;
            x1r = y4r - y6r;
            x1i = y4i - y6i;
            a[offa + 4] = x0r - x1i;
            a[offa + 5] = x0i + x1r;
            a[offa + 6] = x0r + x1i;
            a[offa + 7] = x0i - x1r;
            x0r = y1r - y3i;
            x0i = y1i + y3r;
            x1r = y5r - y7r;
            x1i = y5i - y7i;
            a[offa + 8] = x0r + x1r;
            a[offa + 9] = x0i + x1i;
            a[offa + 10] = x0r - x1r;
            a[offa + 11] = x0i - x1i;
            x0r = y1r + y3i;
            x0i = y1i - y3r;
            x1r = y5r + y7r;
            x1i = y5i + y7i;
            a[offa + 12] = x0r - x1i;
            a[offa + 13] = x0i + x1r;
            a[offa + 14] = x0r + x1i;
            a[offa + 15] = x0i - x1r;
        }

        public static void cftf082(this double[] a, long offa, ref double[] w, long startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];
            y0r = a[offa] - a[offa + 9];
            y0i = a[offa + 1] + a[offa + 8];
            y1r = a[offa] + a[offa + 9];
            y1i = a[offa + 1] - a[offa + 8];
            x0r = a[offa + 4] - a[offa + 13];
            x0i = a[offa + 5] + a[offa + 12];
            y2r = wn4r * (x0r - x0i);
            y2i = wn4r * (x0i + x0r);
            x0r = a[offa + 4] + a[offa + 13];
            x0i = a[offa + 5] - a[offa + 12];
            y3r = wn4r * (x0r - x0i);
            y3i = wn4r * (x0i + x0r);
            x0r = a[offa + 2] - a[offa + 11];
            x0i = a[offa + 3] + a[offa + 10];
            y4r = wk1r * x0r - wk1i * x0i;
            y4i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 2] + a[offa + 11];
            x0i = a[offa + 3] - a[offa + 10];
            y5r = wk1i * x0r - wk1r * x0i;
            y5i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] - a[offa + 15];
            x0i = a[offa + 7] + a[offa + 14];
            y6r = wk1i * x0r - wk1r * x0i;
            y6i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] + a[offa + 15];
            x0i = a[offa + 7] - a[offa + 14];
            y7r = wk1r * x0r - wk1i * x0i;
            y7i = wk1r * x0i + wk1i * x0r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y4r + y6r;
            x1i = y4i + y6i;
            a[offa] = x0r + x1r;
            a[offa + 1] = x0i + x1i;
            a[offa + 2] = x0r - x1r;
            a[offa + 3] = x0i - x1i;
            x0r = y0r - y2r;
            x0i = y0i - y2i;
            x1r = y4r - y6r;
            x1i = y4i - y6i;
            a[offa + 4] = x0r - x1i;
            a[offa + 5] = x0i + x1r;
            a[offa + 6] = x0r + x1i;
            a[offa + 7] = x0i - x1r;
            x0r = y1r - y3i;
            x0i = y1i + y3r;
            x1r = y5r - y7r;
            x1i = y5i - y7i;
            a[offa + 8] = x0r + x1r;
            a[offa + 9] = x0i + x1i;
            a[offa + 10] = x0r - x1r;
            a[offa + 11] = x0i - x1i;
            x0r = y1r + y3i;
            x0i = y1i - y3r;
            x1r = y5r + y7r;
            x1i = y5i + y7i;
            a[offa + 12] = x0r - x1i;
            a[offa + 13] = x0i + x1r;
            a[offa + 14] = x0r + x1i;
            a[offa + 15] = x0i - x1r;
        }

        public static void cftf082(this DoubleLargeArray a, long offa, ref double[] w, long startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];
            y0r = a[offa] - a[offa + 9];
            y0i = a[offa + 1] + a[offa + 8];
            y1r = a[offa] + a[offa + 9];
            y1i = a[offa + 1] - a[offa + 8];
            x0r = a[offa + 4] - a[offa + 13];
            x0i = a[offa + 5] + a[offa + 12];
            y2r = wn4r * (x0r - x0i);
            y2i = wn4r * (x0i + x0r);
            x0r = a[offa + 4] + a[offa + 13];
            x0i = a[offa + 5] - a[offa + 12];
            y3r = wn4r * (x0r - x0i);
            y3i = wn4r * (x0i + x0r);
            x0r = a[offa + 2] - a[offa + 11];
            x0i = a[offa + 3] + a[offa + 10];
            y4r = wk1r * x0r - wk1i * x0i;
            y4i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 2] + a[offa + 11];
            x0i = a[offa + 3] - a[offa + 10];
            y5r = wk1i * x0r - wk1r * x0i;
            y5i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] - a[offa + 15];
            x0i = a[offa + 7] + a[offa + 14];
            y6r = wk1i * x0r - wk1r * x0i;
            y6i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] + a[offa + 15];
            x0i = a[offa + 7] - a[offa + 14];
            y7r = wk1r * x0r - wk1i * x0i;
            y7i = wk1r * x0i + wk1i * x0r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y4r + y6r;
            x1i = y4i + y6i;
            a[offa] = x0r + x1r;
            a[offa + 1] = x0i + x1i;
            a[offa + 2] = x0r - x1r;
            a[offa + 3] = x0i - x1i;
            x0r = y0r - y2r;
            x0i = y0i - y2i;
            x1r = y4r - y6r;
            x1i = y4i - y6i;
            a[offa + 4] = x0r - x1i;
            a[offa + 5] = x0i + x1r;
            a[offa + 6] = x0r + x1i;
            a[offa + 7] = x0i - x1r;
            x0r = y1r - y3i;
            x0i = y1i + y3r;
            x1r = y5r - y7r;
            x1i = y5i - y7i;
            a[offa + 8] = x0r + x1r;
            a[offa + 9] = x0i + x1i;
            a[offa + 10] = x0r - x1r;
            a[offa + 11] = x0i - x1i;
            x0r = y1r + y3i;
            x0i = y1i - y3r;
            x1r = y5r + y7r;
            x1i = y5i + y7i;
            a[offa + 12] = x0r - x1i;
            a[offa + 13] = x0i + x1r;
            a[offa + 14] = x0r + x1i;
            a[offa + 15] = x0i - x1r;
        }

        public static void cftf082(this DoubleLargeArray a, long offa, ref DoubleLargeArray w, long startw)
        {
            double wn4r, wk1r, wk1i, x0r, x0i, x1r, x1i, y0r, y0i, y1r, y1i, y2r, y2i, y3r, y3i, y4r, y4i, y5r, y5i, y6r, y6i, y7r, y7i;

            wn4r = w[startw + 1];
            wk1r = w[startw + 2];
            wk1i = w[startw + 3];
            y0r = a[offa] - a[offa + 9];
            y0i = a[offa + 1] + a[offa + 8];
            y1r = a[offa] + a[offa + 9];
            y1i = a[offa + 1] - a[offa + 8];
            x0r = a[offa + 4] - a[offa + 13];
            x0i = a[offa + 5] + a[offa + 12];
            y2r = wn4r * (x0r - x0i);
            y2i = wn4r * (x0i + x0r);
            x0r = a[offa + 4] + a[offa + 13];
            x0i = a[offa + 5] - a[offa + 12];
            y3r = wn4r * (x0r - x0i);
            y3i = wn4r * (x0i + x0r);
            x0r = a[offa + 2] - a[offa + 11];
            x0i = a[offa + 3] + a[offa + 10];
            y4r = wk1r * x0r - wk1i * x0i;
            y4i = wk1r * x0i + wk1i * x0r;
            x0r = a[offa + 2] + a[offa + 11];
            x0i = a[offa + 3] - a[offa + 10];
            y5r = wk1i * x0r - wk1r * x0i;
            y5i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] - a[offa + 15];
            x0i = a[offa + 7] + a[offa + 14];
            y6r = wk1i * x0r - wk1r * x0i;
            y6i = wk1i * x0i + wk1r * x0r;
            x0r = a[offa + 6] + a[offa + 15];
            x0i = a[offa + 7] - a[offa + 14];
            y7r = wk1r * x0r - wk1i * x0i;
            y7i = wk1r * x0i + wk1i * x0r;
            x0r = y0r + y2r;
            x0i = y0i + y2i;
            x1r = y4r + y6r;
            x1i = y4i + y6i;
            a[offa] = x0r + x1r;
            a[offa + 1] = x0i + x1i;
            a[offa + 2] = x0r - x1r;
            a[offa + 3] = x0i - x1i;
            x0r = y0r - y2r;
            x0i = y0i - y2i;
            x1r = y4r - y6r;
            x1i = y4i - y6i;
            a[offa + 4] = x0r - x1i;
            a[offa + 5] = x0i + x1r;
            a[offa + 6] = x0r + x1i;
            a[offa + 7] = x0i - x1r;
            x0r = y1r - y3i;
            x0i = y1i + y3r;
            x1r = y5r - y7r;
            x1i = y5i - y7i;
            a[offa + 8] = x0r + x1r;
            a[offa + 9] = x0i + x1i;
            a[offa + 10] = x0r - x1r;
            a[offa + 11] = x0i - x1i;
            x0r = y1r + y3i;
            x0i = y1i - y3r;
            x1r = y5r + y7r;
            x1i = y5i + y7i;
            a[offa + 12] = x0r - x1i;
            a[offa + 13] = x0i + x1r;
            a[offa + 14] = x0r + x1i;
            a[offa + 15] = x0i - x1r;
        }

        public static void cftx020(this double[] a, int offa)
        {
            double x0r, x0i;
            x0r = a[offa] - a[offa + 2];
            x0i = -a[offa + 1] + a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] += a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftx020(this double[] a, long offa)
        {
            double x0r, x0i;
            x0r = a[offa] - a[offa + 2];
            x0i = -a[offa + 1] + a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] += a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftx020(this DoubleLargeArray a, int offa)
        {
            double x0r, x0i;
            x0r = a[offa] - a[offa + 2];
            x0i = -a[offa + 1] + a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] += a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftx020(this DoubleLargeArray a, long offa)
        {
            double x0r, x0i;
            x0r = a[offa] - a[offa + 2];
            x0i = -a[offa + 1] + a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] += a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftxb020(this double[] a, int offa)
        {
            double x0r, x0i;

            x0r = a[offa] - a[offa + 2];
            x0i = a[offa + 1] - a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] += a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftxb020(this double[] a, long offa)
        {
            double x0r, x0i;

            x0r = a[offa] - a[offa + 2];
            x0i = a[offa + 1] - a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] += a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftxb020(this DoubleLargeArray a, long offa)
        {
            double x0r, x0i;

            x0r = a[offa] - a[offa + 2];
            x0i = a[offa + 1] - a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] += a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftxc020(this double[] a, int offa)
        {
            double x0r, x0i;
            x0r = a[offa] - a[offa + 2];
            x0i = a[offa + 1] + a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] -= a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        public static void cftxc020(this DoubleLargeArray a, long offa)
        {
            double x0r, x0i;
            x0r = a[offa] - a[offa + 2];
            x0i = a[offa + 1] + a[offa + 3];
            a[offa] += a[offa + 2];
            a[offa + 1] -= a[offa + 3];
            a[offa + 2] = x0r;
            a[offa + 3] = x0i;
        }

        #endregion  

    }
}
